import { supabase } from '../config/supabaseClient.js';
// Importar fun√ß√£o de log do hist√≥rico do invent√°rio
import { logInventoryHistory } from './ InventoryController.js';
import { enviarEmail, enviarEmailPorPapel } from '../utils/emailService.js';

// Criar uma nova requisi√ß√£o
export const createRequest = async (req, res) => {
  try {
    console.log('üîç [createRequest] req.body:', req.body);
    const {
      event_id = null,
      department,
      supplier = null,
      expected_audience = null,
      description,
      location = null,
      start_datetime = null,
      end_datetime = null,
      date,
      itens
    } = req.body;
    const requester_id = req.user.userId;
    const status = 'PENDENTE'; // status inicial
    console.log('Status enviado para o banco:', status);
    const { data: request, error } = await supabase
      .from('requests')
      .insert([{
        event_id,
        requester_id,
        department,
        supplier,
        expected_audience,
        description,
        location,
        start_datetime,
        end_datetime,
        date,
        status
      }])
      .select()
      .single();
    if (error) {
      console.log('‚ùå Erro ao criar requisi√ß√£o:', error);
      return res.status(400).json({ success: false, message: 'Erro ao criar requisi√ß√£o.', error: error.message });
    }

    // Buscar dados do solicitante para o e-mail
    const { data: solicitante } = await supabase
      .from('users')
      .select('full_name, email')
      .eq('id', requester_id)
      .single();

    // Enviar e-mail para todos os pastores sobre a nova requisi√ß√£o
    try {
      const mensagemPastores = `Nova requisi√ß√£o criada!

Departamento: ${department}
Solicitante: ${solicitante?.full_name || 'N/A'}
Data: ${date}
Descri√ß√£o: ${description}
Local: ${location || 'N√£o informado'}

Acesse o sistema para aprovar ou rejeitar esta requisi√ß√£o.`;

      await enviarEmailPorPapel('PASTOR', 'Nova Requisi√ß√£o Aguardando Aprova√ß√£o', mensagemPastores);
      console.log('‚úÖ E-mail enviado para pastores sobre nova requisi√ß√£o');
    } catch (e) {
      console.error('‚ùå Erro ao enviar e-mail para pastores:', e);
      // N√£o falha a cria√ß√£o da requisi√ß√£o se o e-mail falhar
    }

    // Aqui voc√™ pode salvar os itens da requisi√ß√£o em outra tabela se necess√°rio
    res.status(201).json({ success: true, data: request });
  } catch (error) {
    res.status(500).json({ success: false, message: 'Erro interno do servidor', error: error.message });
  }
};

// Listar requisi√ß√µes do usu√°rio (ou todas se ADM)
export const listRequests = async (req, res) => {
  try {
    let query = supabase
      .from('requests')
      .select(`
        *,
        events:event_id (
          id,
          name,
          start_datetime,
          end_datetime
        )
      `);
    
    if (req.user.role !== 'ADM') {
      query = query.or(`requester_id.eq.${req.user.userId},approved_by.eq.${req.user.userId},executed_by.eq.${req.user.userId}`);
    }
    
    const { data: requests, error } = await query;
    
    if (error) {
      console.log('‚ùå Erro ao buscar requisi√ß√µes:', error);
      return res.status(400).json({ success: false, message: 'Erro ao buscar requisi√ß√µes.', error: error.message });
    }
    
    // Garantir que todos os campos necess√°rios estejam presentes
    const processedRequests = (requests || []).map(request => ({
      id: request.id,
      department: request.department || '',
      description: request.description || '',
      date: request.date || '',
      status: request.status || 'PENDENTE',
      event_id: request.event_id || null,
      event_name: request.events?.name || null,
      requester_id: request.requester_id,
      approved_by: request.approved_by,
      executed_by: request.executed_by,
      created_at: request.created_at,
      updated_at: request.updated_at
    }));
    
    res.json({ success: true, data: processedRequests });
  } catch (error) {
    console.log('‚ùå Erro interno:', error);
    res.status(500).json({ success: false, message: 'Erro interno do servidor', error: error.message });
  }
};

// Detalhar uma requisi√ß√£o
export const getRequest = async (req, res) => {
  try {
    const { id } = req.params;
    const { data: request, error } = await supabase
      .from('requests')
      .select('*')
      .eq('id', id)
      .single();
    if (error || !request) {
      return res.status(404).json({ success: false, message: 'Requisi√ß√£o n√£o encontrada.' });
    }
    // Permiss√£o: s√≥ envolvidos ou ADM podem ver
    if (
      req.user.role !== 'ADM' &&
      ![request.requester_id, request.approved_by, request.executed_by].includes(req.user.userId)
    ) {
      return res.status(403).json({ success: false, message: 'Acesso negado.' });
    }
    res.json({ success: true, data: request });
  } catch (error) {
    res.status(500).json({ success: false, message: 'Erro interno do servidor', error: error.message });
  }
};

// Aprovar requisi√ß√£o (PASTOR ou ADM)
export const approveRequest = async (req, res) => {
  try {
    if (!['ADM', 'PASTOR'].includes(req.user.role)) {
      return res.status(403).json({ success: false, message: 'Apenas administradores ou pastores podem aprovar requisi√ß√µes.' });
    }
    const { id } = req.params;
    
    // Primeiro, buscar a requisi√ß√£o para obter os dados
    const { data: requestData, error: fetchError } = await supabase
      .from('requests')
      .select('*')
      .eq('id', id)
      .single();
    
    if (fetchError || !requestData) {
      return res.status(404).json({ success: false, message: 'Requisi√ß√£o n√£o encontrada.', error: fetchError?.message });
    }
    
    // Atualizar status da requisi√ß√£o para APTO
    const { data: request, error } = await supabase
      .from('requests')
      .update({
        status: 'APTO',
        approved_by: req.user.userId,
        approved_at: new Date().toISOString()
      })
      .eq('id', id)
      .select()
      .single();
    
    if (error || !request) {
      return res.status(400).json({ success: false, message: 'Erro ao aprovar requisi√ß√£o.', error: error?.message });
    }
    
    // Enviar e-mail autom√°tico ao usu√°rio solicitante
    const { data: usuario } = await supabase
      .from('users')
      .select('email, full_name')
      .eq('id', requestData.requester_id)
      .single();
    if (usuario && usuario.email) {
      try {
        await enviarEmail(
          usuario.email,
          'Sua requisi√ß√£o foi aprovada!',
          `Ol√° ${usuario.full_name},\n\nSua requisi√ß√£o #${id} foi aprovada e est√° apta para execu√ß√£o.\n\nAcesse o sistema para mais detalhes.`
        );
      } catch (e) {
        console.error('Erro ao enviar e-mail de aprova√ß√£o:', e);
      }
    }

    // Enviar e-mail para audiovisual sobre a requisi√ß√£o aprovada
    try {
      const mensagemAudiovisual = `Requisi√ß√£o aprovada e aguardando execu√ß√£o!

ID da Requisi√ß√£o: ${id}
Departamento: ${requestData.department}
Solicitante: ${usuario?.full_name || 'N/A'}
Data: ${requestData.date}
Descri√ß√£o: ${requestData.description}
Local: ${requestData.location || 'N√£o informado'}

Acesse o sistema para executar esta requisi√ß√£o.`;

      await enviarEmailPorPapel('AUDIOVISUAL', 'Requisi√ß√£o Aprovada - Aguardando Execu√ß√£o', mensagemAudiovisual);
      console.log('‚úÖ E-mail enviado para audiovisual sobre requisi√ß√£o aprovada');
    } catch (e) {
      console.error('‚ùå Erro ao enviar e-mail para audiovisual:', e);
    }
    
    // Criar evento automaticamente baseado na requisi√ß√£o
    if (requestData.start_datetime && requestData.end_datetime) {
      const eventName = `Evento - ${requestData.department}`;
      const eventDescription = requestData.description || `Evento aprovado da requisi√ß√£o ${id}`;
      
      const { data: event, error: eventError } = await supabase
        .from('events')
        .insert([{
          name: eventName,
          location: requestData.location || 'Local a definir',
          start_datetime: requestData.start_datetime,
          end_datetime: requestData.end_datetime,
          description: eventDescription,
          expected_audience: requestData.expected_audience,
          created_by: req.user.userId,
          status: 'CONFIRMADO'
        }])
        .select()
        .single();
      
      if (eventError) {
        console.log('‚ö†Ô∏è Erro ao criar evento automaticamente:', eventError);
        // N√£o falha a aprova√ß√£o se o evento n√£o for criado
      } else {
        // Atualizar a requisi√ß√£o com o ID do evento criado
        await supabase
          .from('requests')
          .update({ event_id: event.id })
          .eq('id', id);
        
        console.log('‚úÖ Evento criado automaticamente:', event.id);
      }
    }
    
    res.json({ 
      success: true, 
      message: 'Requisi√ß√£o aprovada e evento criado automaticamente.', 
      data: request 
    });
  } catch (error) {
    res.status(500).json({ success: false, message: 'Erro interno do servidor', error: error.message });
  }
};

// Executar requisi√ß√£o (SEC ou AUDIOVISUAL)
export const executeRequest = async (req, res) => {
  try {
    if (!['SEC', 'AUDIOVISUAL'].includes(req.user.role)) {
      return res.status(403).json({ success: false, message: 'Apenas Secretaria ou Audiovisual podem executar requisi√ß√µes.' });
    }
    const { id } = req.params;
    // Buscar itens da requisi√ß√£o
    const { data: requestItems, error: errorItems } = await supabase
      .from('request_items')
      .select('*')
      .eq('request_id', id);
    if (errorItems) {
      return res.status(400).json({ success: false, message: 'Erro ao buscar itens da requisi√ß√£o.', error: errorItems.message });
    }
    // Atualizar invent√°rio para cada item
    for (const reqItem of requestItems) {
      if (!reqItem.inventory_id || !reqItem.quantity_requested) continue;
      // Buscar item do invent√°rio
      const { data: inv, error: errInv } = await supabase
        .from('inventory')
        .select('*')
        .eq('id', reqItem.inventory_id)
        .single();
      if (errInv || !inv) continue;
      const novaQuantidade = inv.quantity_available - reqItem.quantity_requested;
      const novoStatus = novaQuantidade <= 0 ? 'INDISPONIVEL' : inv.status;
      // Atualizar invent√°rio
      await supabase
        .from('inventory')
        .update({
          quantity_available: novaQuantidade < 0 ? 0 : novaQuantidade,
          status: novoStatus,
          updated_at: new Date().toISOString()
        })
        .eq('id', reqItem.inventory_id);
      // Registrar hist√≥rico
      await logInventoryHistory({
        inventory_id: reqItem.inventory_id,
        user_id: req.user.userId,
        action: 'USO_REQUISICAO',
        status_anterior: inv.status,
        status_novo: novoStatus,
        quantidade_anterior: inv.quantity_available,
        quantidade_nova: novaQuantidade < 0 ? 0 : novaQuantidade,
        observacao: `Item usado na execu√ß√£o da requisi√ß√£o ${id}`
      });
    }
    // Atualizar status da requisi√ß√£o
    const { data: request, error } = await supabase
      .from('requests')
      .update({
        status: 'EXECUTADO',
        executed_by: req.user.userId,
        executed_at: new Date().toISOString()
      })
      .eq('id', id)
      .select()
      .single();
    if (error || !request) {
      return res.status(400).json({ success: false, message: 'Erro ao executar requisi√ß√£o.', error: error?.message });
    }
    // Enviar e-mail autom√°tico ao usu√°rio solicitante
    const { data: usuario } = await supabase
      .from('users')
      .select('email, full_name')
      .eq('id', request.requester_id)
      .single();
    if (usuario && usuario.email) {
      try {
        await enviarEmail(
          usuario.email,
          'Sua requisi√ß√£o foi executada!',
          `Ol√° ${usuario.full_name},\n\nSua requisi√ß√£o #${id} foi executada.\n\nAcesse o sistema para mais detalhes.`
        );
      } catch (e) {
        console.error('Erro ao enviar e-mail de execu√ß√£o:', e);
      }
    }
    res.json({ success: true, message: 'Requisi√ß√£o executada e invent√°rio atualizado.', data: request });
  } catch (error) {
    res.status(500).json({ success: false, message: 'Erro interno do servidor', error: error.message });
  }
};

// Rejeitar requisi√ß√£o (ADM ou PASTOR)
export const rejectRequest = async (req, res) => {
  try {
    if (!['ADM', 'PASTOR'].includes(req.user.role)) {
      return res.status(403).json({ success: false, message: 'Apenas administradores ou pastores podem rejeitar requisi√ß√µes.' });
    }
    const { id } = req.params;
    const { rejection_reason } = req.body;
    if (!rejection_reason) {
      return res.status(400).json({ success: false, message: 'Motivo da rejei√ß√£o √© obrigat√≥rio.' });
    }
    const { data: request, error } = await supabase
      .from('requests')
      .update({
        status: 'REJEITADO',
        approved_by: req.user.userId,
        approved_at: new Date().toISOString(),
        rejection_reason
      })
      .eq('id', id)
      .select()
      .single();
    if (error || !request) {
      return res.status(400).json({ success: false, message: 'Erro ao rejeitar requisi√ß√£o.', error: error?.message });
    }

    // Buscar dados do solicitante
    const { data: solicitante } = await supabase
      .from('users')
      .select('email, full_name')
      .eq('id', request.requester_id)
      .single();

    // Enviar e-mail autom√°tico ao usu√°rio solicitante
    if (solicitante && solicitante.email) {
      try {
        await enviarEmail(
          solicitante.email,
          'Sua requisi√ß√£o foi rejeitada!',
          `Ol√° ${solicitante.full_name},\n\nSua requisi√ß√£o #${id} foi rejeitada.\nMotivo: ${rejection_reason}\n\nAcesse o sistema para mais detalhes.`
        );
      } catch (e) {
        console.error('Erro ao enviar e-mail de rejei√ß√£o:', e);
      }
    }

    // Enviar e-mail para secret√°rios sobre a rejei√ß√£o
    try {
      const mensagemSecretarios = `Requisi√ß√£o rejeitada!

ID da Requisi√ß√£o: ${id}
Departamento: ${request.department}
Solicitante: ${solicitante?.full_name || 'N/A'}
Data: ${request.date}
Motivo da Rejei√ß√£o: ${rejection_reason}

A requisi√ß√£o foi rejeitada pelo pastor/administrador.`;

      await enviarEmailPorPapel('SEC', 'Requisi√ß√£o Rejeitada', mensagemSecretarios);
      console.log('‚úÖ E-mail enviado para secret√°rios sobre rejei√ß√£o');
    } catch (e) {
      console.error('‚ùå Erro ao enviar e-mail para secret√°rios:', e);
    }

    res.json({ success: true, message: 'Requisi√ß√£o rejeitada.', data: request });
  } catch (error) {
    res.status(500).json({ success: false, message: 'Erro interno do servidor', error: error.message });
  }
};

// Finalizar requisi√ß√£o (devolu√ß√£o de itens)
export const finishRequest = async (req, res) => {
  try {
    const { id } = req.params;
    const { itensDevolvidos } = req.body; // [{ id: inventory_id, quantidade }]
    if (!Array.isArray(itensDevolvidos) || itensDevolvidos.length === 0) {
      return res.status(400).json({ success: false, message: 'Informe os itens devolvidos.' });
    }
    // Atualizar invent√°rio para cada item devolvido
    for (const item of itensDevolvidos) {
      const { id: inventory_id, quantidade } = item;
      // Buscar item do invent√°rio
      const { data: inv, error: errInv } = await supabase
        .from('inventory')
        .select('*')
        .eq('id', inventory_id)
        .single();
      if (errInv || !inv) continue;
      const novaQuantidade = inv.quantity_available + quantidade;
      await supabase
        .from('inventory')
        .update({
          quantity_available: novaQuantidade,
          status: novaQuantidade >= 2 ? 'DISPONIVEL' : inv.status,
          updated_at: new Date().toISOString()
        })
        .eq('id', inventory_id);
      // Registrar hist√≥rico (opcional)
      await logInventoryHistory({
        inventory_id,
        user_id: req.user.userId,
        action: 'DEVOLUCAO_EVENTO',
        status_anterior: inv.status,
        status_novo: novaQuantidade >= 2 ? 'DISPONIVEL' : inv.status,
        quantidade_anterior: inv.quantity_available,
        quantidade_nova: novaQuantidade,
        observacao: `Item devolvido na finaliza√ß√£o da requisi√ß√£o ${id}`
      });
    }
    // Atualizar status da requisi√ß√£o
    const { data: request, error } = await supabase
      .from('requests')
      .update({
        status: 'FINALIZADO',
        finished_by: req.user.userId,
        finished_at: new Date().toISOString()
      })
      .eq('id', id)
      .select()
      .single();
    if (error || !request) {
      return res.status(400).json({ success: false, message: 'Erro ao finalizar requisi√ß√£o.', error: error?.message });
    }
    res.json({ success: true, message: 'Requisi√ß√£o finalizada e itens devolvidos.', data: request });
  } catch (error) {
    res.status(500).json({ success: false, message: 'Erro interno do servidor', error: error.message });
  }
};
