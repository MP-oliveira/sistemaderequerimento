import { supabase } from '../src/config/supabaseClient.js';

async function testApproval() {
  try {
    console.log('üß™ Testando aprova√ß√£o de requisi√ß√£o...\n');

    // Buscar uma requisi√ß√£o com status PENDENTE
    const { data: requests, error } = await supabase
      .from('requests')
      .select('*')
      .eq('status', 'PENDENTE')
      .limit(1)
      .single();

    if (error || !requests) {
      console.log('‚ùå Nenhuma requisi√ß√£o PENDENTE encontrada');
      return;
    }

    console.log('‚úÖ Requisi√ß√£o encontrada:');
    console.log(`   ID: ${requests.id}`);
    console.log(`   Status: ${requests.status}`);
    console.log(`   Departamento: ${requests.department}`);
    console.log(`   Descri√ß√£o: ${requests.description || 'Sem descri√ß√£o'}`);

    // Simular aprova√ß√£o
    const statusHistory = requests.status_history || [];
    statusHistory.push({
      status: 'APTO',
      date: new Date().toISOString(),
      user_id: 'test-user-id',
      user_name: 'Test User',
      reason: 'Teste de aprova√ß√£o'
    });

    const { data: updatedRequest, error: updateError } = await supabase
      .from('requests')
      .update({
        status: 'APTO',
        approved_by: 'test-user-id',
        approved_at: new Date().toISOString(),
        status_history: statusHistory
      })
      .eq('id', requests.id)
      .select()
      .single();

    if (updateError) {
      console.log('‚ùå Erro ao aprovar requisi√ß√£o:', updateError.message);
      return;
    }

    console.log('‚úÖ Requisi√ß√£o aprovada com sucesso!');
    console.log(`   Novo status: ${updatedRequest.status}`);
    console.log(`   Aprovado em: ${updatedRequest.approved_at}`);

  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error);
  }
}

testApproval(); 