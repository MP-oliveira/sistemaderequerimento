// Script de teste para verificar valida√ß√µes de conflito
const API_URL = 'http://localhost:3000';

// Simular token de autentica√ß√£o (voc√™ precisar√° de um token v√°lido)
const token = 'SEU_TOKEN_AQUI'; // Substitua por um token v√°lido

async function testarConflitos() {
  console.log('üß™ Testando valida√ß√µes de conflito...\n');

  const headers = {
    'Content-Type': 'application/json',
    'Authorization': `Bearer ${token}`
  };

  // Teste 1: Verificar conflitos
  console.log('1Ô∏è‚É£ Testando verifica√ß√£o de conflitos...');
  
  const dadosTeste = {
    location: 'Sala de Reuni√£o',
    start_datetime: '2024-01-15T14:00:00',
    end_datetime: '2024-01-15T16:00:00'
  };

  try {
    const response = await fetch(`${API_URL}/api/requests/check-conflicts`, {
      method: 'POST',
      headers,
      body: JSON.stringify(dadosTeste)
    });

    const resultado = await response.json();
    console.log('‚úÖ Resposta da verifica√ß√£o de conflitos:', resultado);
  } catch (error) {
    console.log('‚ùå Erro na verifica√ß√£o de conflitos:', error.message);
  }

  // Teste 2: Tentar criar requisi√ß√£o com conflito
  console.log('\n2Ô∏è‚É£ Testando cria√ß√£o de requisi√ß√£o com conflito...');
  
  const requisi√ß√£oComConflito = {
    department: 'Teste',
    event_name: 'Teste de Conflito',
    date: '2024-01-15',
    location: 'Sala de Reuni√£o',
    description: 'Teste de valida√ß√£o de conflito',
    start_datetime: '2024-01-15T14:00:00',
    end_datetime: '2024-01-15T16:00:00',
    expected_audience: '10 pessoas',
    prioridade: 'M√©dia'
  };

  try {
    const response = await fetch(`${API_URL}/api/requests`, {
      method: 'POST',
      headers,
      body: JSON.stringify(requisi√ß√£oComConflito)
    });

    const resultado = await response.json();
    console.log('‚úÖ Resposta da cria√ß√£o de requisi√ß√£o:', resultado);
  } catch (error) {
    console.log('‚ùå Erro na cria√ß√£o de requisi√ß√£o:', error.message);
  }
}

// Executar teste
testarConflitos().catch(console.error); 